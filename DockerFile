## Custom Dockerfile
FROM consol/ubuntu-xfce-vnc:latest
MAINTAINER Manheim "manakel166@gmail.com"

## switch to sudo
USER 0

## install prerequisites
RUN apt-get update
RUN apt-get -y upgrade

RUN apt-get -y install python-pip

## install robotframework
RUN pip install robotframework

## install robotframework-ride
RUN apt-get -y install software-properties-common python-software-properties
RUN add-apt-repository ppa:nilarimogard/webupd8
RUN apt-get update
RUN apt-get -y install python-wxgtk2.8
RUN pip install robotframework-ride

## install robotframework libraries
RUN pip install -U robotframework-SeleniumLibrary
RUN pip install -U robotframework-sudslibrary
RUN pip install -U requests
RUN pip install -U robotframework-requests
RUN pip install -U robotframework-AppiumLibrary

##install postgresql database access 
RUN apt-get install -y postgresql postgresql-contrib libpq-dev python-dev
RUN apt-get install -y postgresql-client 
RUN apt-get install -y python-psycopg2
RUN pip install psycopg2

## install robotframework standard database library
RUN pip install robotframework-DatabaseLibrary

##install android development kit

WORKDIR /root
RUN apt-get -qqy update && \
    apt-get -qqy --no-install-recommends install \
    openjdk-8-jdk \
    ca-certificates \
    tzdata \
    zip \
    unzip \
    curl \
    wget \
    libqt5webkit5 \
    libgconf-2-4 \
    xvfb \
  && rm -rf /var/lib/apt/lists/*

##set the Java Home  
ENV JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64/jre" \
    PATH=$PATH:$JAVA_HOME/bin

#=====================
# Install Android SDK
#=====================
ARG SDK_VERSION=sdk-tools-linux-3859397
ARG ANDROID_BUILD_TOOLS_VERSION=26.0.0
ARG ANDROID_PLATFORM_VERSION="android-25"

ENV SDK_VERSION=$SDK_VERSION \
    ANDROID_BUILD_TOOLS_VERSION=$ANDROID_BUILD_TOOLS_VERSION \
    ANDROID_HOME=/root

RUN wget -O tools.zip https://dl.google.com/android/repository/${SDK_VERSION}.zip && \
    unzip tools.zip && rm tools.zip && \
    chmod a+x -R $ANDROID_HOME && \
    chown -R root:root $ANDROID_HOME

ENV PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin

# https://askubuntu.com/questions/885658/android-sdk-repositories-cfg-could-not-be-loaded
RUN mkdir -p ~/.android && \
    touch ~/.android/repositories.cfg && \
    echo y | sdkmanager "platform-tools" && \
    echo y | sdkmanager "build-tools;$ANDROID_BUILD_TOOLS_VERSION" && \
    echo y | sdkmanager "platforms;$ANDROID_PLATFORM_VERSION"

ENV PATH=$PATH:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools

#===============
# Expose Ports
#---------------
# 4723
#   Appium port
#===============
EXPOSE 4723


#make adb available for all users
RUN chmod 4550 $ANDROID_HOME/platform-tools/adb


#install appium server
#====================================
# Install latest nodejs, npm, appium
#====================================
ARG APPIUM_VERSION=1.7.2
ENV APPIUM_VERSION=$APPIUM_VERSION

RUN curl -sL https://deb.nodesource.com/setup_7.x | bash - && \
    apt-get -qqy install nodejs && \
    npm install -g appium@${APPIUM_VERSION} && \
    npm cache clean && \
    apt-get remove --purge -y npm && \
    apt-get autoremove --purge -y && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
    apt-get clean



## install appium gui as an app image
RUN mkdir -p /headless/Desktop/automation/appium
WORKDIR /headless/Desktop/automation/appium
RUN wget https://github.com/appium/appium-desktop/releases/download/v1.3.1/appium-desktop-1.3.1-x86_64.AppImage
RUN chmod 777 appium-desktop-1.3.1-x86_64.AppImage
RUN apt-get update
RUN apt-get -y install bsdtar
RUN mkdir AppiumDesktop
WORKDIR /headless/Desktop/automation/appium/AppiumDesktop
RUN bsdtar xfp /headless/Desktop/automation/appium/appium-desktop-1.3.1-x86_64.AppImage


## install selenium server
RUN mkdir -p /headless/Desktop/automation/selenium 
RUN wget --no-verbose https://selenium-release.storage.googleapis.com/3.8/selenium-server-standalone-3.8.1.jar \
    -O /headless/Desktop/automation/selenium/selenium-server-standalone.jar


##install Chrome and Chrome Driver
ARG CHROME_VERSION="google-chrome-stable"
RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
  && echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list \
  && apt-get update -qqy \
  && apt-get -qqy install \
    ${CHROME_VERSION:-google-chrome-stable} \
  && rm /etc/apt/sources.list.d/google-chrome.list \
  && rm -rf /var/lib/apt/lists/* /var/cache/apt/*

ARG CHROME_DRIVER_VERSION="latest"
RUN CD_VERSION=$(if [ ${CHROME_DRIVER_VERSION:-latest} = "latest" ]; then echo $(wget -qO- https://chromedriver.storage.googleapis.com/LATEST_RELEASE); else echo $CHROME_DRIVER_VERSION; fi) \
  && echo "Using chromedriver version: "$CD_VERSION \
  && wget --no-verbose -O /tmp/chromedriver_linux64.zip https://chromedriver.storage.googleapis.com/$CD_VERSION/chromedriver_linux64.zip \
  && rm -rf /headless/Desktop/automation/selenium/chromedriver \
  && unzip /tmp/chromedriver_linux64.zip -d /headless/Desktop/automation/selenium #\
#  && rm /tmp/chromedriver_linux64.zip \
#  && mv /headless/Desktop/automation/selenium/chromedriver /headless/Desktop/automation/selenium/chromedriver-$CD_VERSION \
#  && chmod 755 /headless/Desktop/automation/selenium/chromedriver-$CD_VERSION \
#  && ln -fs /headless/Desktop/automation/selenium/chromedriver-$CD_VERSION /usr/bin/chromedriver
  


##configure volume to persist tests and apk and etc...
RUN mkdir -p /headless/Desktop/automation/10_TESTS
RUN mkdir -p /headless/Desktop/automation/20_AUT
RUN mkdir -p /headless/Desktop/automation/30_LIBRARIES

VOLUME ["/headless/Desktop/automation/10_TESTS", "/headless/Desktop/automation/20_AUT","/headless/Desktop/automation/30_LIBRARIES"]




#====================================================
# Scripts to run appium and connect to Selenium Grid
#====================================================
COPY \
  Appium/entry_point.sh \
  Appium/generate_config.sh \
  Appium/wireless_connect.sh \
  Appium/wireless_autoconnect.sh \
    /root/
RUN chmod +x /root/entry_point.sh && \
    chmod +x /root/generate_config.sh && \
    chmod +x /root/wireless_connect.sh && \
    chmod +x /root/wireless_autoconnect.sh

## gives all required rights and switch back to default user
RUN chmod -R 777 /headless/Desktop/automation
USER 1984

